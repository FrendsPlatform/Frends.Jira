using Frends.Jira.GetIssue.Definitions;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.Jira.GetIssue;

/// <summary>
/// Jira Task.
/// </summary>
public class Jira
{
    /// <summary>
    /// Get Jira issue(s).
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Jira.GetIssue)
    /// </summary>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="input">Input parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, JToken Data, string ErrorMessage }</returns>
    public static async Task<Result> GetIssue([PropertyTab] Connection connection, [PropertyTab] Input input, CancellationToken cancellationToken)
    {
        try
        {
            var client = new RestClient(connection.JiraBaseUrl);
            RestRequest request = new();
            switch (input.SearchType)
            {
                case SearchType.IssueKey:
                    request = new RestRequest($"rest/api/latest/issue/{input.IssueKey}", Method.Get);
                    break;
                case SearchType.IssueId:
                    request = new RestRequest($"rest/api/latest/issue/{input.IssueId}", Method.Get);
                    break;
                case SearchType.Jql:
                    request = new RestRequest($"rest/api/latest/search?jql={input.Jql}", Method.Get);
                    break;
            }

            request.AddHeader("Authorization", $"Bearer {connection.Token}");

            var response = await client.ExecuteAsync(request, cancellationToken);
            var data = JToken.Parse(response.Content);

            if (response.IsSuccessful)
                return new Result(true, data, null);
            else
                return new Result(false, data, $"Error retrieving issue: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            throw new Exception($"An error occurred: {ex.Message}");
        }
    }
}