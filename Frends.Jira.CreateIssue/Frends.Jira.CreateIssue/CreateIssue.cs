using Frends.Jira.CreateIssue.Definitions;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.Jira.CreateIssue;

/// <summary>
/// Jira Task.
/// </summary>
public class Jira
{
    /// <summary>
    /// Create Jira issue.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Jira.CreateIssue)
    /// </summary>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="input">Input parameters</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, JToken Data, string ErrorMessage }</returns>
    public static async Task<Result> CreateIssue([PropertyTab] Connection connection, [PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            using var client = new RestClient(connection.JiraBaseUrl);
            client.AddDefaultHeader("Authorization", $"Bearer {connection.Token}");
            var request = new RestRequest("rest/api/latest/issue", Method.Post);

            var fields = new
            {
                summary = input.Summary,
                issuetype = new { name = input.IssueType },
                description = input.Description,
                project = new { key = input.ProjectKey }
            };

            // Optional parameters.
            if (input.Parameters != null)
                foreach (var param in input.Parameters)
                    fields.GetType().GetProperty(param.Key)?.SetValue(fields, param.Value);

            request.AddJsonBody(new { fields });

            var response = await client.ExecuteAsync(request, cancellationToken);
            var data = JToken.Parse(response.Content);

            if (response.IsSuccessful)
                return new Result(true, data, null);
            else
            {
                if (options.ThrowOnError)
                    throw new Exception($"Error creating issue: {response.StatusCode}, {data}");
                else
                    return new Result(false, data, $"Error creating issue: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"An error occurred: {ex.Message}");
        }
    }
}